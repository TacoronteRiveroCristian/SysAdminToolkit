x-fastapi-app-base-image: &fastapi-app-base-image
  image: fast-api-app-base-image
  build:
    context: ./app
    dockerfile: Dockerfile
  env_file:
    - .env
  restart: unless-stopped
  networks:
    - backup-postgres

services:
  postgres_db:
    image: postgres:16
    container_name: postgres_db_container_bp
    volumes:
      - ./volumes/postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - dev
      - test
      - prod
    networks:
      - backup-postgres

  fastapi-app-prod:
    <<: *fastapi-app-base-image
    container_name: fastapi-app-prod
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    volumes:
      - ./app:/app
      - ./volumes/fastapi_app_data:/app_data
    ports:
      - "8000:8000"
    depends_on:
      postgres_db:
        condition: service_healthy
    profiles:
      - prod

  fastapi-app-dev:
    <<: *fastapi-app-base-image
    container_name: fastapi-app-dev
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./app:/app
      - ./volumes/fastapi_app_data:/app_data
    ports:
      - "8001:8000"
    depends_on:
      postgres_db:
        condition: service_healthy
    profiles:
      - dev

  fastapi-test-runner:
    <<: *fastapi-app-base-image
    container_name: fastapi-test-runner
    command: ["pytest", "/app/tests"]
    volumes:
      - ./app:/app
    depends_on:
      postgres_db:
        condition: service_healthy
    profiles:
      - test

volumes:
  postgres_data_bp:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PWD}/volumes/postgres_data'
  fastapi_app_data_bp:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PWD}/volumes/fastapi_app_data'

networks:
  backup-postgres:
    driver: bridge
    name: backup-postgres
