services:
  # PostgreSQL server for development/testing
  postgres:
    image: postgres:latest # Or a specific version like postgres:15
    container_name: sysadmintoolkit-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=test_db
    volumes:
      - ./volumes/postgres_data_dev:/var/lib/postgresql/data
    profiles:
      - development
    networks:
      - backup_network

  # Backup service
  backup-service:
    container_name: sysadmintoolkit-backup-postgres-service
    build:
      context: .
      dockerfile: backup_postgres.dockerfile
    volumes:
      - ./backup_config.yaml:/app/backup_config.yaml
      - ./volumes/backup_logs:/var/log/backup_postgres
      # Optional: Mount a directory for storing backup files locally if needed
      # - ./volumes/pg_backups:/app/pg_backups
    profiles:
      - development
      - production
    networks:
      - backup_network
    depends_on:
        # In development, wait for the local postgres instance
        # In production, this might not be needed if source/destination are remote
        postgres:
            condition: service_healthy # Or service_started if healthcheck is not configured
    command: >
      sh -c "if grep -q 'backup_schedule:.*[^\\\"[:space:]]' /app/backup_config.yaml; then
               python /app/backup_postgres_cron.py;
             else
               python /app/backup_postgres.py;
             fi"
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U admin -d test_db -h postgres || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s

networks:
  backup_network:
    driver: bridge
    # The name can be set via an .env file or default to 'postgres_network'
    name: ${POSTGRES_NETWORK:-postgres_network}

# Volumes definition (optional, Docker will create them if not defined here)
# volumes:
#   postgres_data_dev:
#   backup_logs:
#   pg_backups:
